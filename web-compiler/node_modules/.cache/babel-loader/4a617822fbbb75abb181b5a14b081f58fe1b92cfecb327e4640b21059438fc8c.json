{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hallm\\\\OneDrive\\\\Documents\\\\Projects folder\\\\React\\\\AI_Web_Compiler\\\\web-compiler\\\\src\\\\Components\\\\CodeBox.js\",\n  _s = $RefreshSig$();\nimport { appModel } from \"../Models/AppModel\";\nimport \"../Styles/CodeBox.css\";\nimport { useContext, useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CodeField = () => {\n  _s();\n  const {\n    setInput,\n    userInput\n  } = useContext(appModel);\n  const [lineNumber, setLines] = useState([\"\"]);\n  const textareaRef = useRef(null);\n  function countLines(text) {\n    const lines = text.split(\"\\n\");\n    setLines(lines);\n  }\n  function updateLineNumbers() {\n    if (textareaRef.current) {\n      const lineHeight = parseInt(window.getComputedStyle(textareaRef.current).lineHeight, 10) || 20;\n      const lineCount = Math.floor(textareaRef.current.scrollHeight / lineHeight);\n      setLines(new Array(lineCount).fill(\"\"));\n    }\n  }\n  useEffect(() => {\n    updateLineNumbers();\n  }, [userInput]); // Recalculate when input changes\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"InputContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InputBoxLeft\",\n      children: lineNumber.map((_, index) => /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"InputLineNum\",\n        children: index + 1\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InputBox\",\n      children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n        className: \"codeInput\",\n        ref: textareaRef,\n        value: userInput,\n        onChange: e => {\n          setInput(e.target.value);\n          countLines(e.target.value);\n        },\n        onScroll: updateLineNumbers // Adjusts line numbers when scrolling\n        ,\n        onInput: updateLineNumbers // Detects wrapping\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(CodeField, \"YYt+Fuwv98Oi2Hhxl0Vt3IWDXqE=\");\n_c = CodeField;\nexport default CodeField;\nvar _c;\n$RefreshReg$(_c, \"CodeField\");","map":{"version":3,"names":["appModel","useContext","useState","useRef","useEffect","jsxDEV","_jsxDEV","CodeField","_s","setInput","userInput","lineNumber","setLines","textareaRef","countLines","text","lines","split","updateLineNumbers","current","lineHeight","parseInt","window","getComputedStyle","lineCount","Math","floor","scrollHeight","Array","fill","className","children","map","_","index","fileName","_jsxFileName","columnNumber","ref","value","onChange","e","target","onScroll","onInput","_c","$RefreshReg$"],"sources":["C:/Users/hallm/OneDrive/Documents/Projects folder/React/AI_Web_Compiler/web-compiler/src/Components/CodeBox.js"],"sourcesContent":["import { appModel } from \"../Models/AppModel\";\r\nimport \"../Styles/CodeBox.css\";\r\nimport { useContext, useState, useRef, useEffect } from \"react\";\r\n\r\nconst CodeField = () => {\r\n  const { setInput, userInput } = useContext(appModel);\r\n  const [lineNumber, setLines] = useState([\"\"]);\r\n  const textareaRef = useRef(null);\r\n\r\n  function countLines(text) {\r\n    const lines = text.split(\"\\n\");\r\n    setLines(lines);\r\n  }\r\n\r\n  function updateLineNumbers() {\r\n    if (textareaRef.current) {\r\n      const lineHeight =\r\n        parseInt(window.getComputedStyle(textareaRef.current).lineHeight, 10) ||\r\n        20;\r\n      const lineCount = Math.floor(\r\n        textareaRef.current.scrollHeight / lineHeight\r\n      );\r\n      setLines(new Array(lineCount).fill(\"\"));\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    updateLineNumbers();\r\n  }, [userInput]); // Recalculate when input changes\r\n\r\n  return (\r\n    <div className=\"InputContainer\">\r\n      <div className=\"InputBoxLeft\">\r\n        {lineNumber.map((_, index) => (\r\n          <p className=\"InputLineNum\" key={index}>\r\n            {index + 1}\r\n          </p>\r\n        ))}\r\n      </div>\r\n      <div className=\"InputBox\">\r\n        <textarea\r\n          className=\"codeInput\"\r\n          ref={textareaRef}\r\n          value={userInput}\r\n          onChange={(e) => {\r\n            setInput(e.target.value);\r\n            countLines(e.target.value);\r\n          }}\r\n          onScroll={updateLineNumbers} // Adjusts line numbers when scrolling\r\n          onInput={updateLineNumbers} // Detects wrapping\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeField;\r\n"],"mappings":";;AAAA,SAASA,QAAQ,QAAQ,oBAAoB;AAC7C,OAAO,uBAAuB;AAC9B,SAASC,UAAU,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhE,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM;IAAEC,QAAQ;IAAEC;EAAU,CAAC,GAAGT,UAAU,CAACD,QAAQ,CAAC;EACpD,MAAM,CAACW,UAAU,EAAEC,QAAQ,CAAC,GAAGV,QAAQ,CAAC,CAAC,EAAE,CAAC,CAAC;EAC7C,MAAMW,WAAW,GAAGV,MAAM,CAAC,IAAI,CAAC;EAEhC,SAASW,UAAUA,CAACC,IAAI,EAAE;IACxB,MAAMC,KAAK,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;IAC9BL,QAAQ,CAACI,KAAK,CAAC;EACjB;EAEA,SAASE,iBAAiBA,CAAA,EAAG;IAC3B,IAAIL,WAAW,CAACM,OAAO,EAAE;MACvB,MAAMC,UAAU,GACdC,QAAQ,CAACC,MAAM,CAACC,gBAAgB,CAACV,WAAW,CAACM,OAAO,CAAC,CAACC,UAAU,EAAE,EAAE,CAAC,IACrE,EAAE;MACJ,MAAMI,SAAS,GAAGC,IAAI,CAACC,KAAK,CAC1Bb,WAAW,CAACM,OAAO,CAACQ,YAAY,GAAGP,UACrC,CAAC;MACDR,QAAQ,CAAC,IAAIgB,KAAK,CAACJ,SAAS,CAAC,CAACK,IAAI,CAAC,EAAE,CAAC,CAAC;IACzC;EACF;EAEAzB,SAAS,CAAC,MAAM;IACdc,iBAAiB,CAAC,CAAC;EACrB,CAAC,EAAE,CAACR,SAAS,CAAC,CAAC,CAAC,CAAC;;EAEjB,oBACEJ,OAAA;IAAKwB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC7BzB,OAAA;MAAKwB,SAAS,EAAC,cAAc;MAAAC,QAAA,EAC1BpB,UAAU,CAACqB,GAAG,CAAC,CAACC,CAAC,EAAEC,KAAK,kBACvB5B,OAAA;QAAGwB,SAAS,EAAC,cAAc;QAAAC,QAAA,EACxBG,KAAK,GAAG;MAAC,GADqBA,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAzB,UAAA;QAAA0B,YAAA;MAAA,OAEnC,CACJ;IAAC;MAAAF,QAAA,EAAAC,YAAA;MAAAzB,UAAA;MAAA0B,YAAA;IAAA,OACC,CAAC,eACN/B,OAAA;MAAKwB,SAAS,EAAC,UAAU;MAAAC,QAAA,eACvBzB,OAAA;QACEwB,SAAS,EAAC,WAAW;QACrBQ,GAAG,EAAEzB,WAAY;QACjB0B,KAAK,EAAE7B,SAAU;QACjB8B,QAAQ,EAAGC,CAAC,IAAK;UACfhC,QAAQ,CAACgC,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;UACxBzB,UAAU,CAAC2B,CAAC,CAACC,MAAM,CAACH,KAAK,CAAC;QAC5B,CAAE;QACFI,QAAQ,EAAEzB,iBAAkB,CAAC;QAAA;QAC7B0B,OAAO,EAAE1B,iBAAkB,CAAC;MAAA;QAAAiB,QAAA,EAAAC,YAAA;QAAAzB,UAAA;QAAA0B,YAAA;MAAA,OAC7B;IAAC;MAAAF,QAAA,EAAAC,YAAA;MAAAzB,UAAA;MAAA0B,YAAA;IAAA,OACC,CAAC;EAAA;IAAAF,QAAA,EAAAC,YAAA;IAAAzB,UAAA;IAAA0B,YAAA;EAAA,OACH,CAAC;AAEV,CAAC;AAAC7B,EAAA,CAlDID,SAAS;AAAAsC,EAAA,GAATtC,SAAS;AAoDf,eAAeA,SAAS;AAAC,IAAAsC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}