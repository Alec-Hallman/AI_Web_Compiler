{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\hallm\\\\OneDrive\\\\Documents\\\\Projects folder\\\\React\\\\AI_Web_Compiler\\\\web-compiler\\\\src\\\\Components\\\\CodeBox.js\",\n  _s = $RefreshSig$();\nimport { appModel } from \"../Models/AppModel\";\nimport \"../Styles/CodeBox.css\";\nimport { useContext, useState, useRef, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst CodeField = () => {\n  _s();\n  const {\n    setInput,\n    userInput\n  } = useContext(appModel);\n  const [lineNumber, setLines] = useState([\"\"]);\n  function countLines(text, textarea) {\n    const lineHeight = parseInt(window.getComputedStyle(textareaRef.current).lineHeight, 10) || 20;\n    const lineCount = Math.floor(textareaRef.current.scrollHeight / lineHeight);\n    setLines(new Array(lineCount).fill(\"\"));\n  }\n  function updateLineNumbers() {\n    if (textareaRef.current) {\n      const lineHeight = parseInt(window.getComputedStyle(textareaRef.current).lineHeight, 10) || 20;\n      const lineCount = Math.floor(textareaRef.current.scrollHeight / lineHeight);\n      setLines(new Array(lineCount).fill(\"\"));\n    }\n  }\n  useEffect(() => {\n    updateLineNumbers();\n  }, [userinput]);\n  const textareaRef = useRef(null);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"InputContainer\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"InputBoxLeft\",\n        children: lineNumber.map((text, index) => {\n          return /*#__PURE__*/_jsxDEV(\"p\", {\n            className: \"InputLineNum\",\n            children: index\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 35,\n            columnNumber: 20\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"InputBox\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"codeInput\",\n          value: userInput,\n          ref: textareaRef,\n          onChange: e => {\n            setInput(e.target.value);\n            countLines(e.target.value);\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this)\n  }, void 0, false);\n};\n_s(CodeField, \"yzzenZP/r1QnPs/ypEWqF7sAOhg=\");\n_c = CodeField;\nexport default CodeField;\nvar _c;\n$RefreshReg$(_c, \"CodeField\");","map":{"version":3,"names":["appModel","useContext","useState","useRef","useEffect","jsxDEV","_jsxDEV","Fragment","_Fragment","CodeField","_s","setInput","userInput","lineNumber","setLines","countLines","text","textarea","lineHeight","parseInt","window","getComputedStyle","textareaRef","current","lineCount","Math","floor","scrollHeight","Array","fill","updateLineNumbers","userinput","children","className","map","index","fileName","_jsxFileName","columnNumber","value","ref","onChange","e","target","_c","$RefreshReg$"],"sources":["C:/Users/hallm/OneDrive/Documents/Projects folder/React/AI_Web_Compiler/web-compiler/src/Components/CodeBox.js"],"sourcesContent":["import { appModel } from \"../Models/AppModel\";\r\nimport \"../Styles/CodeBox.css\";\r\nimport { useContext, useState, useRef, useEffect } from \"react\";\r\n\r\nconst CodeField = () => {\r\n  const { setInput, userInput } = useContext(appModel);\r\n  const [lineNumber, setLines] = useState([\"\"]);\r\n  function countLines(text, textarea) {\r\n    const lineHeight =\r\n      parseInt(window.getComputedStyle(textareaRef.current).lineHeight, 10) ||\r\n      20;\r\n    const lineCount = Math.floor(textareaRef.current.scrollHeight / lineHeight);\r\n    setLines(new Array(lineCount).fill(\"\"));\r\n  }\r\n  function updateLineNumbers() {\r\n    if (textareaRef.current) {\r\n      const lineHeight =\r\n        parseInt(window.getComputedStyle(textareaRef.current).lineHeight, 10) ||\r\n        20;\r\n      const lineCount = Math.floor(\r\n        textareaRef.current.scrollHeight / lineHeight\r\n      );\r\n      setLines(new Array(lineCount).fill(\"\"));\r\n    }\r\n  }\r\n  useEffect(() => {\r\n    updateLineNumbers();\r\n  }, [userinput]);\r\n  const textareaRef = useRef(null);\r\n  return (\r\n    <>\r\n      <div className=\"InputContainer\">\r\n        <div className=\"InputBoxLeft\">\r\n          {lineNumber.map((text, index) => {\r\n            return <p className=\"InputLineNum\">{index}</p>;\r\n          })}\r\n        </div>\r\n        <div className=\"InputBox\">\r\n          <textarea\r\n            className=\"codeInput\"\r\n            value={userInput}\r\n            ref={textareaRef}\r\n            onChange={(e) => {\r\n              setInput(e.target.value);\r\n              countLines(e.target.value);\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n};\r\nexport default CodeField;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}